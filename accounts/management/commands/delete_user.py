from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model
from django.db import transaction

User = get_user_model()

class Command(BaseCommand):
    help = 'X√≥a user kh·ªèi database'

    def add_arguments(self, parser):
        parser.add_argument(
            '--email',
            type=str,
            help='Email c·ªßa user c·∫ßn x√≥a',
        )
        parser.add_argument(
            '--id',
            type=int,
            help='ID c·ªßa user c·∫ßn x√≥a',
        )
        parser.add_argument(
            '--list',
            action='store_true',
            help='Li·ªát k√™ t·∫•t c·∫£ users',
        )
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='X√°c nh·∫≠n x√≥a kh√¥ng c·∫ßn h·ªèi',
        )

    def handle(self, *args, **options):
        if options['list']:
            self.list_users()
            return

        if not options['email'] and not options['id']:
            raise CommandError('Ph·∫£i cung c·∫•p --email ho·∫∑c --id ƒë·ªÉ x√≥a user')

        if options['email'] and options['id']:
            raise CommandError('Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng --email HO·∫∂C --id, kh√¥ng th·ªÉ d√πng c·∫£ hai')

        try:
            if options['email']:
                user = User.objects.get(email=options['email'])
            else:
                user = User.objects.get(id=options['id'])

            self.stdout.write(f"üîç T√¨m th·∫•y user:")
            self.stdout.write(f"  - ID: {user.id}")
            self.stdout.write(f"  - Email: {user.email}")
            self.stdout.write(f"  - Ng√†y tham gia: {user.date_joined}")
            self.stdout.write(f"  - S·ªë flashcards: {user.flashcards.count()}")

            if not options['confirm']:
                confirm = input("\n‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a user n√†y? (yes/no): ")
                if confirm.lower() != 'yes':
                    self.stdout.write(self.style.WARNING('‚ùå ƒê√£ h·ªßy thao t√°c x√≥a'))
                    return

            with transaction.atomic():
                user.delete()

            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ ƒê√£ x√≥a th√†nh c√¥ng user: {user.email}')
            )

        except User.DoesNotExist:
            if options['email']:
                raise CommandError(f'‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email: {options["email"]}')
            else:
                raise CommandError(f'‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi ID: {options["id"]}')

    def list_users(self):
        users = User.objects.all()
        self.stdout.write(f"\nüìã Danh s√°ch t·∫•t c·∫£ users ({users.count()} users):")
        
        if not users.exists():
            self.stdout.write("  (Kh√¥ng c√≥ user n√†o)")
            return

        for user in users:
            flashcard_count = user.flashcards.count()
            self.stdout.write(
                f"  - ID: {user.id} | Email: {user.email} | "
                f"Flashcards: {flashcard_count} | Joined: {user.date_joined.strftime('%d/%m/%Y')}"
            ) 