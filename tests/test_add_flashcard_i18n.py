#!/usr/bin/env python
"""
Test script to verify add_flashcard.html internationalization (i18n) implementation
"""
import os
import sys
import django

# Add the parent directory to Python path so we can import Django modules
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learn_english_project.settings')
django.setup()

from django.contrib.auth import get_user_model
from vocabulary.models import Deck
from django.test import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.utils import translation
from vocabulary.context_processors import i18n_compatible_translations

User = get_user_model()

def test_translation_keys():
    """Test that all required translation keys exist in both languages"""
    print("üß™ Testing translation keys for add_flashcard.html...")
    
    # Create mock request for context processor
    factory = RequestFactory()
    request = factory.get('/')

    # Add session middleware
    middleware = SessionMiddleware(lambda x: None)
    middleware.process_request(request)
    request.session.save()

    # Test English translations
    request.session['django_language'] = 'en'
    translation.activate('en')
    en_context = i18n_compatible_translations(request)
    en_texts = en_context['manual_texts']

    # Test Vietnamese translations
    request.session['django_language'] = 'vi'
    translation.activate('vi')
    vi_context = i18n_compatible_translations(request)
    vi_texts = vi_context['manual_texts']
    
    # Required translation keys for add_flashcard.html
    required_keys = [
        # Existing keys
        'add_flashcard',
        'add_new_flashcard', 
        'add_vocabulary_description',
        'select_deck',
        'please_select_deck',
        'create_new_deck',
        'term_label',
        'phonetic_label',
        'english_definition_label',
        'vietnamese_definition_label',
        'term_placeholder',
        'phonetic_placeholder',
        'definition_placeholder',
        'vietnamese_placeholder',
        'upload_image',
        'add_new_card',
        'save_all_flashcards',
        'drag_to_move',
        'delete_card',
        'part_of_speech',
        'listen',
        
        # New keys added for i18n
        'quick_add_multiple_words',
        'quick_add_placeholder',
        'quick_add_info',
        'generate_cards',
        'processing_words',
        'processing_word_individual',
        'create_new_deck_title',
        'deck_name_label',
        'deck_name_placeholder',
        'deck_name_required',
        'cancel',
        'created',
        'deck_created_success',
        'cannot_create_deck',
        'unknown_error',
        'duplicate_word_detected',
        'word_already_exists',
        'use_different_word',
        'no_words_found',
        'enter_words_pipe',
        'no_deck_selected',
        'select_deck_before_adding',
        'cannot_delete_only_card',
        'translating',
        'translation_not_available',
        'translation_error',
        'quick_add_results',
        'words_added_successfully',
        'duplicate_words_skipped',
        'words_with_errors',
        'no_words_processed'
    ]
    
    print(f"‚úÖ Testing {len(required_keys)} translation keys...")
    
    missing_en = []
    missing_vi = []
    
    for key in required_keys:
        if key not in en_texts:
            missing_en.append(key)
        if key not in vi_texts:
            missing_vi.append(key)
    
    if missing_en:
        print(f"‚ùå Missing English translations: {missing_en}")
    else:
        print("‚úÖ All English translations present")
        
    if missing_vi:
        print(f"‚ùå Missing Vietnamese translations: {missing_vi}")
    else:
        print("‚úÖ All Vietnamese translations present")
    
    return len(missing_en) == 0 and len(missing_vi) == 0

def test_template_rendering():
    """Test that the template renders without errors in both languages"""
    print("\nüß™ Testing template rendering in both languages...")
    
    from django.test import Client
    from django.contrib.auth import get_user_model
    
    User = get_user_model()
    
    # Create test user
    user, created = User.objects.get_or_create(
        email='i18n-test@example.com',
        defaults={'is_active': True}
    )
    if created:
        user.set_password('testpass123')
        user.save()
    
    client = Client()
    client.force_login(user)
    
    # Test English version
    response_en = client.get('/en/add-flashcard/')
    if response_en.status_code == 200:
        print("‚úÖ English template renders successfully")
        
        # Check for some key translated content
        content = response_en.content.decode('utf-8')
        if 'Quick Add Multiple Words' in content:
            print("‚úÖ English quick add section found")
        else:
            print("‚ùå English quick add section not found")
            
    else:
        print(f"‚ùå English template failed to render: {response_en.status_code}")
    
    # Test Vietnamese version
    response_vi = client.get('/vi/add-flashcard/')
    if response_vi.status_code == 200:
        print("‚úÖ Vietnamese template renders successfully")
        
        # Check for some key translated content
        content = response_vi.content.decode('utf-8')
        if 'Th√™m nhanh nhi·ªÅu t·ª´' in content:
            print("‚úÖ Vietnamese quick add section found")
        else:
            print("‚ùå Vietnamese quick add section not found")
            
    else:
        print(f"‚ùå Vietnamese template failed to render: {response_vi.status_code}")
    
    return response_en.status_code == 200 and response_vi.status_code == 200

def print_sample_translations():
    """Print sample translations to verify quality"""
    print("\nüìã Sample translations verification:")
    print("-" * 60)
    
    factory = RequestFactory()
    request = factory.get('/')

    # Add session middleware
    middleware = SessionMiddleware(lambda x: None)
    middleware.process_request(request)
    request.session.save()

    # English
    request.session['django_language'] = 'en'
    translation.activate('en')
    en_context = i18n_compatible_translations(request)
    en_texts = en_context['manual_texts']

    # Vietnamese
    request.session['django_language'] = 'vi'
    translation.activate('vi')
    vi_context = i18n_compatible_translations(request)
    vi_texts = vi_context['manual_texts']
    
    sample_keys = [
        'quick_add_multiple_words',
        'quick_add_placeholder',
        'generate_cards',
        'duplicate_word_detected',
        'words_added_successfully',
        'processing_word_individual'
    ]
    
    for key in sample_keys:
        print(f"üîë {key}:")
        print(f"   üá∫üá∏ EN: {en_texts.get(key, 'MISSING')}")
        print(f"   üáªüá≥ VI: {vi_texts.get(key, 'MISSING')}")
        print()

def print_testing_guide():
    """Print manual testing guide"""
    print("\nüß™ MANUAL TESTING GUIDE FOR ADD FLASHCARD I18N")
    print("=" * 70)
    
    print("\nüìã TESTING PROCEDURE:")
    print("-" * 50)
    
    print("\n1Ô∏è‚É£ ENGLISH LANGUAGE TEST:")
    print("   ‚Ä¢ Navigate to: http://localhost:8000/en/add-flashcard/")
    print("   ‚Ä¢ ‚úÖ VERIFY: Page title shows 'Add Flashcard - Learn English'")
    print("   ‚Ä¢ ‚úÖ VERIFY: Quick Add section shows 'Quick Add Multiple Words'")
    print("   ‚Ä¢ ‚úÖ VERIFY: Placeholder text is in English")
    print("   ‚Ä¢ ‚úÖ VERIFY: Button shows 'Generate Cards'")
    print("   ‚Ä¢ ‚úÖ VERIFY: Form labels are in English")
    
    print("\n2Ô∏è‚É£ VIETNAMESE LANGUAGE TEST:")
    print("   ‚Ä¢ Navigate to: http://localhost:8000/vi/add-flashcard/")
    print("   ‚Ä¢ ‚úÖ VERIFY: Page title shows 'Th√™m Flashcard - Learn English'")
    print("   ‚Ä¢ ‚úÖ VERIFY: Quick Add section shows 'Th√™m nhanh nhi·ªÅu t·ª´'")
    print("   ‚Ä¢ ‚úÖ VERIFY: Placeholder text is in Vietnamese")
    print("   ‚Ä¢ ‚úÖ VERIFY: Button shows 'T·∫°o th·∫ª'")
    print("   ‚Ä¢ ‚úÖ VERIFY: Form labels are in Vietnamese")
    
    print("\n3Ô∏è‚É£ INTERACTIVE FEATURES TEST:")
    print("   ‚Ä¢ Test 'Create new deck' functionality")
    print("   ‚Ä¢ ‚úÖ VERIFY: SweetAlert popup shows localized text")
    print("   ‚Ä¢ Test Quick Add with multiple words")
    print("   ‚Ä¢ ‚úÖ VERIFY: Processing messages are localized")
    print("   ‚Ä¢ ‚úÖ VERIFY: Results popup shows localized text")
    print("   ‚Ä¢ Test duplicate word detection")
    print("   ‚Ä¢ ‚úÖ VERIFY: Warning messages are localized")
    
    print("\n4Ô∏è‚É£ ERROR HANDLING TEST:")
    print("   ‚Ä¢ Try to delete the only card")
    print("   ‚Ä¢ ‚úÖ VERIFY: Alert message is localized")
    print("   ‚Ä¢ Try Quick Add without selecting deck")
    print("   ‚Ä¢ ‚úÖ VERIFY: Warning popup is localized")
    print("   ‚Ä¢ Test translation functionality")
    print("   ‚Ä¢ ‚úÖ VERIFY: Loading and error messages are localized")
    
    print("\nüéØ EXPECTED BEHAVIOR:")
    print("-" * 50)
    print("‚Ä¢ All user-facing text should be properly localized")
    print("‚Ä¢ No hardcoded English text should appear in Vietnamese mode")
    print("‚Ä¢ SweetAlert popups should use localized text")
    print("‚Ä¢ Form validation messages should be localized")
    print("‚Ä¢ Processing indicators should show localized text")
    print("‚Ä¢ Error messages should be in the selected language")

if __name__ == '__main__':
    print("üöÄ Add Flashcard Internationalization (i18n) Test")
    print("=" * 70)
    
    try:
        # Test translation keys
        keys_ok = test_translation_keys()
        
        # Test template rendering
        render_ok = test_template_rendering()
        
        # Show sample translations
        print_sample_translations()
        
        # Print testing guide
        print_testing_guide()
        
        print(f"\nüéâ I18n implementation test completed!")
        print(f"üìä Translation keys: {'‚úÖ PASS' if keys_ok else '‚ùå FAIL'}")
        print(f"üìä Template rendering: {'‚úÖ PASS' if render_ok else '‚ùå FAIL'}")
        
        if keys_ok and render_ok:
            print("\nüöÄ Ready for manual testing!")
            print("Start the development server and follow the testing guide above.")
        else:
            print("\n‚ö†Ô∏è Issues found. Please review the errors above.")
        
    except Exception as e:
        print(f"‚ùå Error during testing: {e}")
        import traceback
        traceback.print_exc()
