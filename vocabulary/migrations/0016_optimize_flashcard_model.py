# Generated by Claude Code for model optimization

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('vocabulary', '0015_add_performance_indexes'),
    ]

    operations = [
        # Add database-level defaults and constraints for better performance
        migrations.RunSQL(
            """
            -- Add check constraint for difficulty_score values
            ALTER TABLE vocabulary_flashcard ADD CONSTRAINT check_difficulty_score 
            CHECK (difficulty_score IS NULL OR difficulty_score IN (0.0, 0.33, 0.67, 1.0));
            """,
            reverse_sql="ALTER TABLE vocabulary_flashcard DROP CONSTRAINT IF EXISTS check_difficulty_score;"
        ),
        
        # Add constraint for logical consistency
        migrations.RunSQL(
            """
            -- Ensure correct_reviews never exceeds total_reviews
            ALTER TABLE vocabulary_flashcard ADD CONSTRAINT check_reviews_consistency 
            CHECK (correct_reviews <= total_reviews);
            """,
            reverse_sql="ALTER TABLE vocabulary_flashcard DROP CONSTRAINT IF EXISTS check_reviews_consistency;"
        ),
        
        # Add database view for frequently accessed flashcard data
        migrations.RunSQL(
            """
            CREATE VIEW IF NOT EXISTS flashcard_study_view AS
            SELECT 
                f.id,
                f.user_id,
                f.deck_id,
                f.word,
                f.difficulty_score,
                f.times_seen_today,
                f.last_seen_date,
                f.total_reviews,
                f.correct_reviews,
                CASE 
                    WHEN f.difficulty_score IS NULL THEN 'new'
                    WHEN f.difficulty_score = 0.0 THEN 'again'
                    WHEN f.difficulty_score = 0.33 THEN 'hard'
                    WHEN f.difficulty_score = 0.67 THEN 'good'
                    WHEN f.difficulty_score = 1.0 THEN 'easy'
                    ELSE 'unknown'
                END as difficulty_level,
                CASE 
                    WHEN f.total_reviews = 0 THEN 0
                    ELSE ROUND((f.correct_reviews * 100.0 / f.total_reviews), 1)
                END as accuracy_percentage
            FROM vocabulary_flashcard f;
            """,
            reverse_sql="DROP VIEW IF EXISTS flashcard_study_view;"
        ),
    ]